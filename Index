<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Spencer Chat</title>
    <style>
        /* Reset & Base Styles */
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Poppins', sans-serif;
            background-color: #000;
            color: white;
            height: 100vh;
            overflow: hidden;
        }

        /* Welcome Page Styles */
        #welcome-page {
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
            padding: 20px;
        }

        .text-container {
            font-weight: bold;
            font-size: 3rem;
            line-height: 1.5;
            margin-bottom: 2rem;
        }

        .fade-text {
            text-shadow: 3px 3px 7px rgba(0, 0, 0, 0.6);
            background: linear-gradient(to right, #FFA500, #FF4500);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            position: relative;
        }

        .fade-text::after {
            content: "|";
            animation: blink 1s infinite;
            color: #FFA500;
        }

        .tap-to-chat {
            display: block;
            margin-top: 15px;
            font-size: 1.8rem;
            font-weight: normal;
            color: #FFA500;
        }

        /* Main App Container (hidden initially) */
        #app-container {
            display: none;
            height: 100%;
            flex-direction: column;
        }

        /* Chat Container */
        #chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        #chat-box {
            flex: 1;
            padding: 10px;
            overflow-y: auto;
            background-color: #000;
        }

        .message {
            margin: 15px;
            padding: 12px;
            border-radius: 15px;
            max-width: 80%;
            word-wrap: break-word;
        }

        .user {
            background-color: #1a1a1a;
            margin-left: auto;
            margin-right: 10px;
        }

        .bot {
            background-color: #252525;
            margin-right: auto;
            margin-left: 10px;
            position: relative;
            opacity: 0;
            animation: fadeIn 0.5s ease-in-out forwards;
        }

        .typing {
            display: flex;
            padding: 10px;
            margin: 10px;
            border-radius: 20px;
            background-color: #252525;
            max-width: 80%;
            margin-right: auto;
            margin-left: 10px;
        }

        .typing-dots {
            width: 8px;
            height: 8px;
            margin: 0 2px;
            background: white;
            border-radius: 50%;
            animation: blink 1.4s infinite;
        }

        .typing-dots:nth-child(2) {
            animation-delay: 0.2s;
        }

        .typing-dots:nth-child(3) {
            animation-delay: 0.4s;
        }

        /* Input Area */
        #input-container {
            display: flex;
            padding: 10px;
            background: #28282B;
        }

        #user-input {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 25px;
            font-size: 1rem;
            background: #1e1e1e;
            color: white;
            outline: none;
        }

        #send-button {
            padding: 15px;
            background: linear-gradient(45deg, #4CAF50, #45A049);
            color: white;
            border: none;
            border-radius: 25px;
            margin-left: 10px;
            cursor: pointer;
            font-weight: bold;
        }

        /* History Page */
        #history-page {
            display: none;
            height: 100%;
            overflow-y: auto;
            padding: 20px;
            background: #121212;
        }

        .history-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .history-card {
            background: #1e1e1e;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
            cursor: pointer;
            border: 1px solid #333;
        }

        .card-header {
            padding: 1.2rem;
            background: #252525;
            border-bottom: 1px solid #333;
        }

        .card-header h3 {
            font-size: 1.1rem;
            margin-bottom: 0.3rem;
            color: #ffffff;
        }

        .card-header .date {
            font-size: 0.85rem;
            color: #aaa;
        }

        .card-content {
            padding: 1.2rem;
            max-height: 200px;
            overflow-y: auto;
        }

        /* Bottom Navigation */
        .bottom-nav {
            display: flex;
            background: #1e1e1e;
            border-top: 1px solid #333;
        }

        .nav-item {
            flex: 1;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            transition: background 0.3s;
        }

        .nav-item.active {
            background: #333;
        }

        .nav-item i {
            font-size: 1.5rem;
            margin-bottom: 5px;
        }

        /* Name Modal */
        #nameModal {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            width: 90%;
            max-width: 400px;
            background-color: #1e1e1e;
            border-radius: 12px;
            padding: 20px;
            display: none;
            z-index: 1000;
            text-align: center;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.5);
        }

        #nameInput {
            width: 100%;
            padding: 12px;
            font-size: 1rem;
            border: 1px solid #555;
            border-radius: 90px;
            margin-bottom: 15px;
            background-color: #2c2c2c;
            color: white;
        }

        .button-group {
            display: flex;
            justify-content: space-between;
        }

        #skipButton, #saveButton {
            flex: 1;
            padding: 12px;
            font-size: 1rem;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s;
        }

        #saveButton {
            background-color: #00b894;
            color: white;
        }

        #skipButton {
            background-color: #d63031;
            color: white;
        }

        /* Animations */
        @keyframes blink {
            0%, 100% { opacity: 1; }
            50% { opacity: 0; }
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .text-container {
                font-size: 2rem;
            }

            .history-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
    <!-- Font Awesome for icons -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
    <!-- Welcome Page -->
    <div id="welcome-page">
        <div class="text-container">
            <div id="animatedText" class="fade-text"></div>
            <span class="tap-to-chat">Tap anywhere to continue</span>
        </div>
    </div>

    <!-- Main App Container -->
    <div id="app-container">
        <!-- Chat Page -->
        <div id="chat-container">
            <div id="chat-box"></div>
            <div id="input-container">
                <input type="text" id="user-input" placeholder="Message...">
                <button id="send-button">Send</button>
            </div>
        </div>

        <!-- History Page -->
        <div id="history-page">
            <h1>Chat History</h1>
            <div class="actions">
                <button id="clear-history">Clear History</button>
            </div>
            <div id="history-container" class="history-grid"></div>
            <div id="empty-state" class="empty-state" style="display: none;">
                <svg xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 24 24" fill="none" stroke="#555" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
                    <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                </svg>
                <h2>No Chat History</h2>
                <p>Your conversation history will appear here</p>
            </div>
        </div>

        <!-- Bottom Navigation -->
        <div class="bottom-nav">
            <div class="nav-item active" id="nav-chat">
                <i class="fas fa-comment-alt"></i>
                <div>Chat</div>
            </div>
            <div class="nav-item" id="nav-history">
                <i class="fas fa-history"></i>
                <div>History</div>
            </div>
        </div>
    </div>

    <!-- Name Modal -->
    <div id="nameModal">
        <div class="modal-content">
            <h2>Hi, I'm Spencer.<br>What's your name?</h2>
            <input type="text" id="nameInput" placeholder="Enter your name here">
            <div class="button-group">
                <button id="skipButton">Skip</button>
                <button id="saveButton">Save</button>
            </div>
        </div>
    </div>

    <script>
        // Configuration
        const CONFIG = {
            chatHistoryKey: "spencer_chat_history",
            userNameKey: "spencer_user_name",
            userSkippedKey: "spencer_user_skipped"
        };

        // DOM Elements
        const welcomePage = document.getElementById('welcome-page');
        const appContainer = document.getElementById('app-container');
        const chatContainer = document.getElementById('chat-container');
        const historyPage = document.getElementById('history-page');
        const chatBox = document.getElementById('chat-box');
        const userInput = document.getElementById('user-input');
        const sendButton = document.getElementById('send-button');
        const navChat = document.getElementById('nav-chat');
        const navHistory = document.getElementById('nav-history');
        const historyContainer = document.getElementById('history-container');
        const emptyState = document.getElementById('empty-state');
        const clearHistoryBtn = document.getElementById('clear-history');
        const nameModal = document.getElementById('nameModal');
        const nameInput = document.getElementById('nameInput');
        const skipButton = document.getElementById('skipButton');
        const saveButton = document.getElementById('saveButton');
        const animatedText = document.getElementById('animatedText');

        // State
        let currentPage = 'chat';

        // Initialize the app
        function initApp() {
            // Check if user has seen welcome before
            const savedUsername = localStorage.getItem(CONFIG.userNameKey);
            const userSkipped = localStorage.getItem(CONFIG.userSkippedKey);

            if (!savedUsername && !userSkipped) {
                showNameModal();
            } else {
                displayWelcomeMessage(savedUsername);
            }

            // Set up event listeners
            setupEventListeners();
        }

        // Set up all event listeners
        function setupEventListeners() {
            // Welcome page click
            welcomePage.addEventListener('click', startChatApp);

            // Chat input
            userInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    sendMessage();
                }
            });

            sendButton.addEventListener('click', sendMessage);

            // Navigation
            navChat.addEventListener('click', () => switchPage('chat'));
            navHistory.addEventListener('click', () => switchPage('history'));

            // History
            clearHistoryBtn.addEventListener('click', clearHistory);

            // Name modal
            skipButton.addEventListener('click', skipName);
            saveButton.addEventListener('click', saveName);
        }

        // Show name modal
        function showNameModal() {
            nameModal.style.display = 'block';
        }

        // Hide name modal
        function hideNameModal() {
            nameModal.style.display = 'none';
        }

        // Skip name entry
        function skipName() {
            localStorage.setItem(CONFIG.userSkippedKey, 'true');
            hideNameModal();
            displayWelcomeMessage();
        }

        // Save name
        function saveName() {
            const name = nameInput.value.trim();
            if (name) {
                localStorage.setItem(CONFIG.userNameKey, name);
                localStorage.removeItem(CONFIG.userSkippedKey);
                hideNameModal();
                displayWelcomeMessage(name);
            } else {
                alert('Please enter a valid name!');
            }
        }

        // Display welcome message
        function displayWelcomeMessage(name = null) {
            const timeGreeting = getTimeGreeting();
            let greetingText;

            if (name) {
                greetingText = `${timeGreeting}, ${name}. Tap to chat`;
            } else {
                greetingText = `${timeGreeting}. I'm Spencer. Tap to chat`;
            }

            animateText(greetingText);
        }

        // Animate welcome text
        function animateText(text) {
            animatedText.textContent = "";
            let index = 0;

            function typeWriter() {
                if (index < text.length) {
                    animatedText.textContent += text.charAt(index);
                    index++;
                    setTimeout(typeWriter, 50);
                }
            }

            typeWriter();
        }

        // Get time-based greeting
        function getTimeGreeting() {
            const hour = new Date().getHours();
            if (hour < 12) return "Good morning";
            if (hour < 18) return "Good afternoon";
            return "Good evening";
        }

        // Start chat app
        function startChatApp() {
            welcomePage.style.display = 'none';
            appContainer.style.display = 'flex';
            loadChatHistory();
        }

        // Switch between pages
        function switchPage(page) {
            currentPage = page;

            if (page === 'chat') {
                chatContainer.style.display = 'flex';
                historyPage.style.display = 'none';
                navChat.classList.add('active');
                navHistory.classList.remove('active');
            } else {
                chatContainer.style.display = 'none';
                historyPage.style.display = 'block';
                navChat.classList.remove('active');
                navHistory.classList.add('active');
                loadHistoryView();
            }
        }

        // Send message
        function sendMessage() {
            const message = userInput.value.trim();
            if (!message) return;

            // Add user message to chat
            addMessage(message, 'user');
            userInput.value = '';

            // Show typing indicator
            const typingIndicator = document.createElement('div');
            typingIndicator.className = 'typing';
            typingIndicator.innerHTML = `
                <span class="typing-dots"></span>
                <span class="typing-dots"></span>
                <span class="typing-dots"></span>
            `;
            chatBox.appendChild(typingIndicator);
            chatBox.scrollTop = chatBox.scrollTop + 100;

            // Simulate bot response after delay
            setTimeout(() => {
                // Remove typing indicator
                if (typingIndicator.parentNode) {
                    chatBox.removeChild(typingIndicator);
                }

                // Generate and add bot response
                const response = generateResponse(message);
                addMessage(response, 'bot');

                // Save to history
                saveToHistory(message, response);
            }, 1500);
        }

        // Add message to chat
        function addMessage(text, sender) {
            const messageDiv = document.createElement('div');
            messageDiv.className = `message ${sender}`;
            messageDiv.textContent = text;
            chatBox.appendChild(messageDiv);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        // Generate bot response
        function generateResponse(input) {
            // Simple response logic - expand this with your actual response generation
            const responses = [
                "I'm Spencer, your AI assistant. How can I help you today? just know that i might not be effective as i have not been trained on your data for ofline use",
                "That's an interesting point. but you see the thing is if im offline, i cant properly sync with what you are trying to explan",
                "I'm designed to help with various topics. What would you like to discuss?",
                "i am oflline right now you have to chat online so i can get data",
                "hello",
                "hi" ,
                "i am basically a blank blob right, please chat online for five to ten minutes for me to gather enough data about your preferences"
            ];

            return responses[Math.floor(Math.random() * responses.length)];
        }

        // Save message to history
        function saveToHistory(userMessage, botResponse) {
            let history = JSON.parse(localStorage.getItem(CONFIG.chatHistoryKey)) || [];

            const newEntry = {
                user: userMessage,
                bot: botResponse,
                timestamp: new Date().toISOString()
            };

            history.push(newEntry);
            localStorage.setItem(CONFIG.chatHistoryKey, JSON.stringify(history));
        }

        // Load chat history
        function loadChatHistory() {
            const history = JSON.parse(localStorage.getItem(CONFIG.chatHistoryKey)) || [];

            // Display last few messages if any
            if (history.length > 0) {
                const lastEntry = history[history.length - 1];
                addMessage(lastEntry.user, 'user');
                addMessage(lastEntry.bot, 'bot');
            }
        }

        // Load history view
        function loadHistoryView() {
            const history = JSON.parse(localStorage.getItem(CONFIG.chatHistoryKey)) || [];
            historyContainer.innerHTML = '';

            if (history.length === 0) {
                emptyState.style.display = 'block';
                return;
            }

            emptyState.style.display = 'none';

            // Display history in reverse order (newest first)
            history.slice().reverse().forEach((entry, index) => {
                const card = document.createElement('div');
                card.className = 'history-card';

                const date = new Date(entry.timestamp);

                card.innerHTML = `
                    <div class="card-header">
                        <h3>Conversation ${history.length - index}</h3>
                        <div class="date">${date.toLocaleDateString()} • ${date.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}</div>
                    </div>
                    <div class="card-content">
                        <div class="message user">${entry.user}</div>
                        <div class="message bot">${entry.bot}</div>
                    </div>
                `;

                card.addEventListener('click', () => {
                    // Switch to chat and load this conversation
                    switchPage('chat');
                    chatBox.innerHTML = '';
                    addMessage(entry.user, 'user');
                    addMessage(entry.bot, 'bot');
                });

                historyContainer.appendChild(card);
            });
        }

        // Clear history
        function clearHistory() {
            if (confirm('Are you sure you want to clear all chat history?')) {
                localStorage.removeItem(CONFIG.chatHistoryKey);
                loadHistoryView();
            }
        }

        // Initialize the app when DOM is loaded
        document.addEventListener('DOMContentLoaded', initApp);
    </script>
</body>
</html>
